{"version":3,"sources":["query.ts","common/user-context.tsx","form-manager/FormManage.tsx","form-filler/SDCQuestion.tsx","form-manager/FormDisplay.tsx","form-manager/FormUpload.tsx","form-filler/DashBoard.tsx","form-filler/FormFill.tsx","common/not-found.tsx","common/error-boundary.tsx","login.tsx","common/protected-route.tsx","common/hooks.tsx","common/header-menu-item-link.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formQuery","urqlClient","createClient","url","UserContext","createContext","displayName","UserContextProvider","children","useState","status","error","user","state","setState","useEffect","console","log","fetch","credentials","then","response","ok","Error","statusText","json","catch","Provider","value","FormManage","history","useHistory","useMutation","deleteForm","formID","setFormID","handleProcedureIdClick","action","a","validateId","params","displayFormAction","formId","push","deleteFormAction","id","alert","uploadFormAction","txtInputProps","labelText","onChange","event","target","className","TextInput","Button","kind","onClick","procedureId","SDCQuestion","questionID","formArray","setFormArray","questionIndex","findIndex","obj","question","inputArray","superQuestionID","superIndex","userInput","superAnswerID","isEnabled","textProps","title","qIndex","disabled","helperText","name","dateProps","numProps","isNaN","parseInt","min","max","step","radioProps","radioButton","questionType","mustImplement","renderArbitraryQuestionProperties","DatePicker","dateFormat","datePickerType","DatePickerInput","textAfterResponse","NumberInput","FormGroup","legendText","choices","map","choice","text","arbitraryProperties","length","item","Object","entries","key","Array","isArray","JSON","stringify","indexOf","RadioButton","ID","defaultChecked","entry","FormDisplay","useParams","formVars","useQuery","query","variables","formObj","data","fetching","form","__typename","renderQuestions","questions","subQuestions","assembleSection","sectionId","sectionObj","find","docType","subSectionIDs","section","subSections","forEach","filter","superSectionID","assembleQuestions","sectionIDs","sections","assemble","lastModified","lineage","patientID","renderProperties","Form","renderSections","footer","FormUpload","uploadForm","procedureID","formToUpdate","setFormToUpdate","fileName","contents","fileData","setFileData","updateFile","fileIn","currentTarget","files","content","txtInput","newProcedureID","onSubmit","preventDefault","clone","input","xml","type","DashBoard","searchInput","setSearchInput","resultAll","search","rows","forms","lastm","Search","DataTable","row","includes","headers","header","TableContainer","description","Table","TableHead","TableRow","TableHeader","TableBody","cells","cell","TableCell","FormFill","setPatientID","uploadRes","formSubmit","submitFlag","outer_loop","slice","time","Date","now","responseID","toString","NotFound","style","textAlign","marginTop","goBack","component","errorHandler","ErrorBoundary","props","undefined","info","this","React","Component","Login","userState","useContext","username","setUsername","password","setPassword","pause","userObj","executeQuery","userNameProps","pwdProps","guestLogin","res","ProtectedRoute","isAuthenticated","noAuthComponent","rest","auth","isPending","isError","isSuccess","useAuth","NoAuthComponent","window","localStorage","setItem","location","href","marginBottom","render","path","permissions","HeaderMenuItemLinkBase","to","staticContext","onKeyDown","HeaderMenuItemLinkRouter","withRouter","HeaderMenuItemLink","forwardRef","ref","App","redirectUrl","getItem","removeItem","Header","aria-label","HeaderName","prefix","HeaderNavigation","exact","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6SAgBaA,EAAS,85CAuRTC,EAAaC,YAAa,CACtCC,IAAI,a,QClSCC,EAAkCC,wBAAc,IAEtDD,EAAYE,YAAc,cAE1B,IAQMC,EAAsB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACxBC,mBAAS,CAClCC,OAAQ,UACRC,MAAO,KACPC,KAAM,OAJ2C,mBAC3CC,EAD2C,KACpCC,EADoC,KA2BlD,OApBAC,qBAAU,WACLF,EAAMD,KACTI,QAAQC,IAAIJ,EAAO,OAjBAK,MAAM,gBAAiB,CAAEC,YAAc,YAC3DC,MAAK,SAACC,GACN,IAAKA,EAASC,GACb,MAAM,IAAIC,MAAMF,EAASG,YAE1B,OAAOH,EAASI,UAeNL,MACT,SAACR,GAAD,OAAUE,EAAS,CAClBJ,OAAQ,UACRC,MAAO,KACPC,YAEAc,OACD,SAACf,GAAD,OAAWG,EAAS,CACnBJ,OAAQ,QACRC,QACAC,KAAM,YAGN,IACJI,QAAQC,IAAI,OAAQJ,GAElB,kBAACT,EAAYuB,SAAb,CAAsBC,MAAO,CAACf,MAAMA,EAAOC,SAASA,IACjDN,I,2CCvCQqB,G,OAAa,WACxB,IAAMC,EAAUC,cADc,EAEPC,YF4LG,wEE5LjBC,EAFqB,sBAGFxB,mBAAS,IAHP,mBAGvByB,EAHuB,KAGfC,EAHe,KAIxBC,EAAsB,uCAAG,WAAOC,GAAP,+BAAAC,EAAA,yDAExBC,EAAWL,GAFa,gEAAuBM,EAAvB,iCAAuBA,EAAvB,0BAKvBH,EAAM,WAAN,GAAOH,GAAP,OAAkBM,IALK,2CAAH,sDAQtBC,EAAiB,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,sDACxBR,EAAQa,KAAK,gBAAkBD,GADP,2CAAH,sDAIjBE,EAAgB,uCAAG,WAAOF,GAAP,SAAAJ,EAAA,sEACFL,EAAW,CAAEY,GAAIH,IADf,cAEX/B,MACPmC,MAAM,iDAAD,OAAkDJ,IADzCI,MAAM,QAAD,OAASJ,EAAT,cAFD,2CAAH,sDAMhBK,EAAgB,uCAAG,WAAOV,GAAP,SAAAC,EAAA,sDACvBR,EAAQa,KAAK,gBAAkBN,GADR,2CAAH,sDAGhBW,EAAgB,CACtBH,GAAG,SACHI,UAAU,UACVC,SAAU,SAACC,GACThB,EAAUgB,EAAMC,OAAOxB,SAGzB,OACE,yBAAKyB,UAAU,OACf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,kBAACC,EAAA,EAAcN,GACf,kBAACO,EAAA,EAAD,CAAQV,GAAG,gBAAgBW,KAAK,WAAWH,UAAU,cAAcI,QAAS,kBAAMrB,EAAuBK,KAAzG,gBACA,kBAACc,EAAA,EAAD,CAAQV,GAAG,eAAeW,KAAK,SAASH,UAAU,cAAcI,QAAS,kBAAMrB,EAAuBQ,KAAtG,gBAEF,yBAAKS,UAAU,gBACb,kBAACE,EAAA,EAAD,CAAQV,GAAG,eAAeW,KAAK,WAAWH,UAAU,cAAcI,QAAS,kBAAMV,EAAiB,SAAlG,eACA,kBAACQ,EAAA,EAAD,CAAQV,GAAG,eAAeW,KAAK,WAAWH,UAAU,cAAcI,QAAS,kBAAMV,EAAiB,YAAlG,oBAOR,SAASR,EAAWmB,GAClB,OAAuB,OAAhBA,GAAwC,KAAhBA,E,iECrDpBC,EAAc,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,aAC9CC,EAAcF,EAAUG,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMe,KAC1DM,EAAcL,EAAUE,GACxBI,EAAU,YAAON,GAEvB,GAAgC,MAA5BK,EAASE,gBAAyB,CAClC,IAAMC,EAAaR,EAAUG,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMqB,EAASE,mBACrEP,EAAUQ,GAAYhD,SAASiD,WAAaJ,EAASK,cACpDL,EAASM,WAAY,EAErBN,EAASM,WAAY,EAI7B,IAAMC,EAAY,CACd5B,GAAIqB,EAASrB,GACbI,UAAWiB,EAASQ,MACpBxB,SAAW,SAACC,GACR,IAAMwB,EAASd,EAAUG,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMqB,EAASrB,MACpEsB,EAAWQ,GAAQtD,SAASiD,UAAYnB,EAAMC,OAAOxB,MACrDkC,EAAaK,IAGjBS,SAAgC,MAAtBV,EAASM,YAA6BN,EAASM,UACzD5C,MAAuC,OAAhCsC,EAAS7C,SAASiD,UAAqBJ,EAAS7C,SAASiD,UAAY,GAC5EO,WAAYX,EAASY,MAGnBC,EAAY,CACdlC,GAAIqB,EAASrB,GACbI,UAAWiB,EAASQ,MACpBxB,SAAW,SAACC,GACR,IAAMwB,EAASd,EAAUG,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMqB,EAASrB,MACpEsB,EAAWQ,GAAQtD,SAASiD,UAAYnB,EAAMC,OAAOxB,MACrDkC,EAAaK,IAGjBS,SAAgC,MAAtBV,EAASM,YAA6BN,EAASM,UACzD5C,MAAuC,OAAhCsC,EAAS7C,SAASiD,UAAqBJ,EAAS7C,SAASiD,UAAY,IAG1EU,EAAW,CACbnC,GAAIqB,EAASrB,GAEbK,SAAW,SAACC,GACR,IAAMwB,EAASd,EAAUG,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMqB,EAASrB,MACvB,OAA1CsB,EAAWQ,GAAQtD,SAASiD,YAC3BH,EAAWQ,GAAQtD,SAASiD,UAAY,GAEzCnB,EAAMC,OAAOxB,MACZuC,EAAWQ,GAAQtD,SAASiD,UAAYW,MAAMC,SAAS/B,EAAMC,OAAOxB,QAAUuC,EAAWQ,GAAQtD,SAASiD,UAAYY,SAAS/B,EAAMC,OAAOxB,OAChH,qBAAvBuB,EAAMC,OAAOsB,MAClBP,EAAWQ,GAAQtD,SAASiD,UAAYY,SAASf,EAAWQ,GAAQtD,SAASiD,WAAa,EAE9D,qBAAvBnB,EAAMC,OAAOsB,QAClBP,EAAWQ,GAAQtD,SAASiD,UAAYY,SAASf,EAAWQ,GAAQtD,SAASiD,WAAa,GAE9FR,EAAaK,IAGjBgB,IAAK,EACLC,IAAK,QACLxD,MAAuC,OAAhCsC,EAAS7C,SAASiD,UAAqBJ,EAAS7C,SAASiD,UAAY,EAC5Ee,KAAM,EACNT,SAA+B,MAAtBV,EAASM,YAA6BN,EAASM,UACxDK,WAAYX,EAASY,MAGnBQ,EAAa,CACfjC,UAAU,YACVH,SAAW,SAACC,GACR,IAAMgB,EAAc,YAAON,GACrBc,EAASR,EAAWH,WAAW,SAACC,GAAD,OAAaA,EAAIpB,IAAMqB,EAASrB,MAClEsB,EAAWQ,GAAQtD,SAASiD,WAAanB,EAAMC,OAAOxB,MACrDuC,EAAWQ,GAAQtD,SAASiD,UAAU,GAErCH,EAAWQ,GAAQtD,SAASiD,UAAYnB,EAAMC,OAAOxB,MAC1DkC,EAAaK,IAEjBW,KAAMZ,EAASY,MAEbS,EAAa,CACflC,UAAU,cACVuB,SAA+B,MAAtBV,EAASM,YAA6BN,EAASM,UACxDM,KAAKZ,EAASY,MAElB,MAA6B,QAAzBZ,EAASsB,aAEL,yBAAKnC,UAAU,eACda,EAASuB,cAAgB,IAAM,KAC/BC,EAAkCxB,GACnC,kBAACZ,EAAA,EAAcmB,IAGa,QAAzBP,EAASsB,aAEZ,yBAAKnC,UAAU,eACda,EAASuB,cAAgB,IAAM,KAC/BC,EAAkCxB,GACnC,kBAACyB,EAAA,EAAD,CAAYC,WAAW,QAAQC,eAAe,UAC1C,kBAACC,EAAA,EAAoBf,IACXb,EAAS6B,kBAAoB7B,EAAS6B,kBAAoB,IAG5C,UAAzB7B,EAASsB,aAEZ,yBAAKnC,UAAU,eACda,EAASuB,cAAgB,IAAM,KAC/BC,EAAkCxB,GACnC,kBAAC8B,EAAA,EAAgBhB,IAIS,iBAAzBd,EAASsB,aAEV,yBAAKnC,UAAU,eACf,kBAAC4C,EAAA,EAAD,CAAWC,WAAYhC,EAASQ,MAAOR,EAASQ,MAAQR,EAASrB,IAAjE,IAAuEqB,EAASuB,cAAgB,IAAM,KACrGC,EAAkCxB,GACnC,wBAASoB,EACJpB,EAAS7C,SAAS8E,QAAQC,KAAI,SAACC,GAC5B,IAAIC,EAAOD,EAAO3B,MAClB,GAAGR,EAAS7C,SAASkF,qBAAwE,IAAjDrC,EAAS7C,SAASkF,oBAAoBC,OAAc,CAAC,IAAD,gBAClEtC,EAAS7C,SAASkF,oBAAoBH,KAAI,SAACK,GAAD,OAAeC,OAAOC,QAAQF,OADN,IAC5F,IAAI,EAAJ,qBAAyG,CAAC,IAAD,+CAA/FG,EAA+F,KAA1FhF,EAA0F,KAClGiF,MAAMC,QAAQlF,IAAUA,EAAM4E,SAAWtC,EAAS7C,SAAS8E,QAAQK,SAClEF,EAAOA,EAAO,KAAOS,KAAKC,UAAUJ,GAAO,KAAOG,KAAKC,UAAUpF,EAAMsC,EAAS7C,SAAS8E,QAAQc,QAAQZ,OAHrB,+BAOhG,OAAO,kBAACa,EAAA,EAAD,eAAatF,MAAOyE,EAAOc,GAAIlE,UAAWqD,EAAMM,IAAKP,EAAOvB,MAAUS,EAAtE,CAAmF6B,eAAgBlD,EAAS7C,SAASiD,WAAW+B,EAAOc,YAQnJ,MAILzB,EAAoC,SAACxB,GACvC,OAAQ,6BACHA,EAASqC,oBAAsBrC,EAASqC,oBAAoBH,KAAI,SAACK,GAChE,OAAOA,EAAO,yBAAKpD,UAAU,+BAC3BqD,OAAOC,QAAQF,GAAML,KAAI,SAACiB,GAAD,OAAgB,wBAAIhE,UAAU,6BAA6B0D,KAAKC,UAAUK,EAAM,IAAhE,KAAuEN,KAAKC,UAAUK,EAAM,SAC7H,MACP,K,SChJAC,G,MAAc,WAAO,IACxB5D,EAAgB6D,cAAhB7D,YADuB,EAEGjD,mBAAc,IAFjB,mBAExBoD,EAFwB,KAEbC,EAFa,OAGZrD,mBAAc,CAAEoC,GAAIa,IAAhC8D,EAHwB,sBAIZC,YAAS,CAC1BC,MAAO1H,EACP2H,UAAWH,IAFNI,EAJwB,oBASvBC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,SAAoBF,EAAVjH,MACxB,GAAImH,EAAU,OAAQ,yCAEE,GAApBjE,EAAU2C,QACZqB,EAAKE,KAAK3B,KAAI,SAACK,UACNA,EAAKuB,WACZnE,EAAUlB,KAAK8D,MAGnB,IAsBMwB,EAAkB,SAAlBA,EAAmBC,GACvB,OACE,6BACGA,EAAU9B,KAAI,SAAClC,GACd,OAAO,6BACL,kBAAC,EAAD,CAAcN,WAAYM,EAASrB,GAAIgB,UAAWA,EAAWC,aAAcA,IAC1EI,EAASiE,aAAcF,EAAgB/D,EAASiE,cAAc,WA8BnEC,EAAkB,SAAlBA,EAAmBC,EAAmBR,GAC1C,IAAMS,EAAaT,EAAKU,MAAK,SAAC9B,GAAD,MAAgC,eAAjBA,EAAK+B,SAA4B/B,EAAK5D,KAAOwF,KACpFI,EAA6BH,EAA7BG,cAAkBC,EAFsC,YAE3BJ,EAF2B,mBAG7DI,EAAQC,YAAc,GACtBF,EAAcG,SAAQ,SAAC/F,GAAD,OAAgB6F,EAAQC,YAAYhG,KAAKyF,EAAgBvF,EAAIgF,OACnF,IAAIK,EAAYL,EAAKgB,QAAO,SAACpC,GAAD,MAAgC,gBAAjBA,EAAK+B,SAA6B/B,EAAKqC,iBAAmBT,KAGrG,OAFAK,EAAQR,UAAY,GACpBA,EAAUU,SAAQ,SAAC1E,GAAD,OAAmBwE,EAAQR,UAAUvF,KAAKoG,EAAkB7E,EAAU2D,OACjFa,GAGHK,EAAoB,SAAC7E,EAAe2D,GACxC,IAAMM,EAAeN,EAAKgB,QAAO,SAACpC,GAAD,MAAgC,gBAAjBA,EAAK+B,SAA6B/B,EAAKrC,kBAAoBF,EAASrB,MAEpH,OADAqB,EAASiE,aAAeA,EACjBjE,GAEH7C,EAxBW,SAACwG,GAChB,IAAIA,EAAM,MAAO,GADkB,MAENA,EAAK,GAA5BmB,EAF6B,EAE7BA,WAAejB,EAFc,8BAKnC,OAFAA,EAAKkB,SAAW,GAChBD,EAAWJ,SAAQ,SAACP,GAAD,OAAuBN,EAAKkB,SAAStG,KAAKyF,EAAgBC,EAAWR,OACjFE,EAmBQmB,CAASrF,GAC1B,OACE,yBAAKR,UAAU,cACf,yBAAKA,UAAU,cACb,4BAAKhC,EAASa,QACd,4BAAKb,EAASyD,MA7CO,SAAC+C,EAAWtB,GACnC,OACE,yBAAKlD,UAAU,oBACb,sCAAYwE,EAAKnD,OACjB,wCAAcmD,EAAKsB,cAEnB,wCAActB,EAAKuB,SACC,aAAnBvB,EAAKwB,UAA2B,wCAAcxB,EAAKwB,WAAkB,KACrE9C,EAAsBA,EAAoBH,KAAI,SAACK,GAC9C,OAAOA,EAAO,yBAAKpD,UAAU,2BAC3BqD,OAAOC,QAAQF,GAAML,KAAI,SAACiB,GAAD,OAAgB,wBAAIhE,UAAU,yBAAyB0D,KAAKC,UAAUK,EAAM,IAA5D,KAAmEN,KAAKC,UAAUK,EAAM,SACzH,MACP,IAkCNiC,CAAiBjI,EAAUA,EAASkF,sBAErC,kBAACgD,EAAA,EAAD,CAAOlG,UAAU,cACjB,6BAnFmB,SAAjBmG,EAAkBP,GACtB,OAAKA,EAIH,yBAAK5F,UAAU,eACZ4F,EAAS7C,KAAI,SAACsC,GACb,OAAgB,OAAZA,EAAyB,KAE3B,6BACE,uBAAGrF,UAAU,gBAAb,WAAqCqF,EAAQ5D,KAA7C,KAAqD4D,EAAQhE,OAC5DgE,EAAQjD,cAAgB,2DAAsC,KAC9DwC,EAAgBS,EAAQR,WACxBsB,EAAed,EAAQC,kBAXzB,KAkFNa,CAAenI,EAAS4H,UACzB,8BAEA,uBAAG5F,UAAU,UAAb,WAAgChC,EAASoI,W,QC1GlCC,EAAa,WAAO,IACvBrH,EAAWkF,cAAXlF,OADsB,EAERL,YL+NI,uHK/NlB2H,EAFsB,sBAaUlJ,mBAVf,CACvBoC,GAAI,GACJ6B,MAAO,GACPI,KAAM,GACN8E,YAAa,KAPe,mBAavBC,EAbuB,KAaTC,EAbS,OAcErJ,mBALR,CACtBsJ,SAAU,GACVC,SAAU,KAXkB,mBAcvBC,EAduB,KAcbC,EAda,KA6CxBC,EAAU,uCAAG,WAAOhH,GAAP,iBAAAb,EAAA,6DAEZ8H,EAASjH,EAAMkH,cAAcC,MAAM,GACrBF,EAAO9D,OAEblF,MAAK,SAACkF,GAAD,OAAeA,KALhB,SAOI8D,EAAO9D,OAPX,OAOZiE,EAPY,OAQjBL,EAAY,CAACH,SAAUK,EAAOtF,KAAMkF,SAAWO,IAR9B,2CAAH,sDAcVC,EAAW,CACjB3H,GAAG,SACHI,UAAU,UACVC,SAP0B,SAACC,GACzB,IAAIsH,EAAiBtH,EAAMkH,cAAczI,MACzCkI,EAAgB,CAACjH,GAAI4H,EAAgBb,YAAaa,MAOpD,OACE,yBAAKpH,UAAU,yBACb,4BAAgB,QAAXhB,EAAmB,SAAW,SAAnC,WACA,0BAAMQ,GAAG,aAAa6H,SApDL,SAACvH,GACpBA,EAAMwH,iBAgBN,IAAIC,EAAK,eAAQf,GAKjB,OAJAe,EAAQ,CAAC/H,GAAIgH,EAAahH,GAAIgI,MAAO,CAAChI,GAAIgH,EAAahH,GAAIiI,IAAKb,EAASD,WACzEF,EAAgBc,GAChBjB,EAAWiB,GACX9H,MAAM,YAAD,OAAwB,QAAXT,EAAmB,WAAa,UAA7C,wBAAsE4H,EAASF,SAA/E,8BAA6GF,EAAaD,eACxH,IA+BD,kBAACtG,EAAA,EAAckH,GACjB,uCAEE,2BAAOO,KAAK,OAAO7H,SAAUiH,KAE/B,kBAAC5G,EAAA,EAAD,CAAQwH,KAAK,SAASvH,KAAK,YAA3B,a,0ECxEKwH,G,OAAY,WACrB,IAAMlJ,EAAUC,cADW,EAEWtB,mBAAS,IAFpB,mBAEpBwK,EAFoB,KAEPC,EAFO,OAGPzD,YAAS,CAC3BC,MNTmB,8JMQdyD,EAHoB,oBAMrBC,EAAS,CACfvI,GAAG,aACHI,UAAU,eACVC,SAAU,SAACC,GAAD,OAAe+H,EAAe/H,EAAMC,OAAOxB,SASnDyJ,EAAOF,EAAUtD,KAAMsD,EAAUtD,KAAKyD,MAAMlF,KAAI,SAACK,GAAD,MAAe,CAAC5D,GAAI4D,EAAK5D,GAAI+G,YAAYnD,EAAKmD,YAAa2B,MAAO9E,EAAK0C,iBAAiB,GAE5I,OACE,yBAAK9F,UAAU,aACf,yBAAKA,UAAU,cAAa,kBAACmI,EAAA,EAAWJ,IACxC,yBAAK/H,UAAU,aACf,kBAACoI,EAAA,EAAD,CAAWJ,KAAqB,IAAfJ,EAAoBI,EAAOA,EAAKxC,QAAO,SAAC6C,GAAD,OAAYA,EAAI9B,YAAY+B,SAASV,IAAgBS,EAAI7I,GAAG8I,SAASV,MAAeW,QAL9H,CAAC,CAAChF,IAAI,KAAMiF,OAAO,MAAO,CAACjF,IAAI,cAAeiF,OAAO,gBAAiB,CAACjF,IAAI,QAASiF,OAAO,mBAMxG,gBAAGR,EAAH,EAAGA,KAAMO,EAAT,EAASA,QAAT,OACC,kBAACE,EAAA,EAAD,CAAgBpH,MAAM,WAAWqH,YAAY,aAC3C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGN,EAAQxF,KAAI,SAACyF,GAAD,OACX,kBAACM,EAAA,EAAD,CAAavF,IAAKiF,EAAOjF,KACtBiF,EAAOA,WAGZ,kBAACM,EAAA,EAAD,QAGJ,kBAACC,EAAA,EAAD,KACGf,EAAKjF,KAAI,SAACsF,GAAD,OACR,kBAACQ,EAAA,EAAD,CAAUtF,IAAK8E,EAAI7I,IAChB6I,EAAIW,MAAMjG,KAAI,SAACkG,GAAD,OACb,kBAACC,EAAA,EAAD,CAAW3F,IAAK0F,EAAKzJ,GAAIY,QAAS,kBAAI3B,EAAQa,KAAK,aAAe+I,EAAI7I,MAAMyJ,EAAK1K,wBC1CtF4K,EAAW,WAAO,IACrBtK,EAAWqF,cAAXrF,OADoB,EAEMzB,mBAAc,GAFpB,mBAErB4I,EAFqB,KAEVoD,EAFU,OAGPzK,YPqNI,4GOrNjB0K,EAHoB,sBAKMjM,mBAAc,IALpB,mBAKrBoD,EALqB,KAKVC,EALU,OAMTrD,mBAAc,CAAEoC,GAAIX,IAAhCsF,EANqB,sBAOTC,YAAS,CAC1BC,MAAO1H,EACP2H,UAAWH,IAFNI,EAPqB,oBAWpBC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,SAAoBF,EAAVjH,MACxB,GAAImH,EAAU,OAAQ,yCAEE,GAApBjE,EAAU2C,QACZqB,EAAKE,KAAK3B,KAAI,SAACK,UACNA,EAAKuB,WACZnE,EAAUlB,KAAK8D,MAGnB,IAsBMwB,EAAkB,SAAlBA,EAAmBC,GACvB,OACE,6BACGA,EAAU9B,KAAI,SAAClC,GACd,OAAO,6BACL,kBAAC,EAAD,CAAcN,WAAYM,EAASrB,GAAIgB,UAAWA,EAAWC,aAAcA,IAC1EI,EAASiE,aAAcF,EAAgB/D,EAASiE,cAAc,WA+BnEC,EAAkB,SAAlBA,EAAmBC,EAAmBR,GAC1C,IAAMS,EAAaT,EAAKU,MAAK,SAAC9B,GAAD,MAAgC,eAAjBA,EAAK+B,SAA4B/B,EAAK5D,KAAOwF,KACpFI,EAA6BH,EAA7BG,cAAkBC,EAFsC,YAE3BJ,EAF2B,mBAG7DI,EAAQC,YAAc,GACtBF,EAAcG,SAAQ,SAAC/F,GAAD,OAAgB6F,EAAQC,YAAYhG,KAAKyF,EAAgBvF,EAAIgF,OACnF,IAAIK,EAAYL,EAAKgB,QAAO,SAACpC,GAAD,MAAgC,gBAAjBA,EAAK+B,SAA6B/B,EAAKqC,iBAAmBT,KAGrG,OAFAK,EAAQR,UAAY,GACpBA,EAAUU,SAAQ,SAAC1E,GAAD,OAAmBwE,EAAQR,UAAUvF,KAAKoG,EAAkB7E,EAAU2D,OACjFa,GAGHK,EAAoB,SAAC7E,EAAe2D,GACxC,IAAMM,EAAeN,EAAKgB,QAAO,SAACpC,GAAD,MAAgC,gBAAjBA,EAAK+B,SAA6B/B,EAAKrC,kBAAoBF,EAASrB,MAEpH,OADAqB,EAASiE,aAAeA,EACjBjE,GAEH7C,EAxBW,SAACwG,GAChB,IAAIA,EAAM,MAAO,GADkB,MAENA,EAAK,GAA5BmB,EAF6B,EAE7BA,WAAejB,EAFc,8BAKnC,OAFAA,EAAKkB,SAAW,GAChBD,EAAWJ,SAAQ,SAACP,GAAD,OAAuBN,EAAKkB,SAAStG,KAAKyF,EAAgBC,EAAWR,OACjFE,EAmBQmB,CAASrF,GACpBY,EAAY,CAChB5B,GAAI,YACJI,UAAW,aACXC,SAAW,SAACC,GACVsJ,EAAatJ,EAAMC,OAAOxB,OAC1BiC,EAAU0E,MAAK,SAAC9B,GAAD,MAAgC,YAAjBA,EAAK+B,WAAuBa,UAAYlG,EAAMC,OAAOxB,OAErFiD,WAAY,mBACZjD,MAA+E,aAAxEiC,EAAU0E,MAAK,SAAC9B,GAAD,MAAgC,YAAjBA,EAAK+B,WAAuBa,UAA2B,GAAKxF,EAAU0E,MAAK,SAAC9B,GAAD,MAAgC,YAAjBA,EAAK+B,WAAuBa,WAEzJsD,EAAa,WACjB,IAAIC,EAAa,EAED,IAAbvD,GAEDvG,MAAM,+BACN8J,EAAa,GAEVA,EAAa,EARK,oBAWP/I,GAXO,IAUvBgJ,EACA,IAAI,EAAJ,qBACA,CAAC,IADOpG,EACR,QACE,GAAoB,gBAAjBA,EAAK+B,UAEoB,IAAvB/B,EAAKhB,gBAA8C,IAAnBgB,EAAKjC,UAEtC,GAAyB,SAAtBiC,EAAKjB,aACR,CACE,GAA+B,KAA5BiB,EAAKpF,SAASiD,UACjB,CACExB,MAAM,2CAAD,OAA6C2D,EAAK/B,MAAOoI,MAAM,GAAI,KACxEF,EAAa,EACb,MAAMC,EAEHD,EAAa,OAEf,GAAyB,kBAAtBnG,EAAKjB,aACb,CACE,GAAqC,GAAlCiB,EAAKpF,SAASiD,UAAUkC,OAC3B,CACE1D,MAAM,2CAAD,OAA6C2D,EAAK/B,MAAOoI,MAAM,GAAI,KACxEF,EAAa,EACb,MAAMC,EAEHD,EAAa,MAGpB,CACE,GAAqB,OAAlBnG,EAAKpF,SACR,CACEyB,MAAM,2CAAD,OAA6C2D,EAAK/B,MAAOoI,MAAM,GAAI,KACxEF,EAAa,EACb,MAAMC,EAEHD,EAAa,IA7CH,8BAmDvB,GAAkB,IAAfA,EACH,CACE,IAAMG,EAAOC,KAAKC,MACZC,EAAU,UAAM7L,EAASwB,GAAf,YAAqBwG,EAArB,YAAkC0D,EAAKI,YACvD9L,EAASwB,GAAKqK,EACdR,EAAU,CAAC7J,GAAIqK,EAAYrC,MAAOhH,IAClC7C,QAAQC,IAAI,yBAA0B4C,KAGxC,OACE,yBAAKR,UAAU,cACf,yBAAKA,UAAU,cACb,4BAAKhC,EAASa,QACd,4BAAKb,EAASyD,MApHO,SAAC+C,EAAWtB,GACnC,OACE,yBAAKlD,UAAU,oBACb,sCAAYwE,EAAKnD,OACjB,wCAAcmD,EAAKsB,cAEnB,wCAActB,EAAKuB,SACC,aAAnBvB,EAAKwB,UAA2B,wCAAcxB,EAAKwB,WAAkB,KACrE9C,EAAsBA,EAAoBH,KAAI,SAACK,GAC9C,OAAOA,EAAO,yBAAKpD,UAAU,2BAC3BqD,OAAOC,QAAQF,GAAML,KAAI,SAACiB,GAAD,OAAgB,wBAAIhE,UAAU,yBAAyB0D,KAAKC,UAAUK,EAAM,IAA5D,KAAmEN,KAAKC,UAAUK,EAAM,SACzH,MACP,IAyGNiC,CAAiBjI,EAAUA,EAASkF,qBACrC,kBAACjD,EAAA,EAAcmB,IAEf,kBAAC8E,EAAA,EAAD,CAAMmB,SAAUiC,EAAYtJ,UAAU,cACtC,6BA3JmB,SAAjBmG,EAAkBP,GACtB,OAAKA,EAIH,yBAAK5F,UAAU,eACZ4F,EAAS7C,KAAI,SAACsC,GACb,OAAgB,OAAZA,EAAyB,KAE3B,6BACE,uBAAGrF,UAAU,gBAAb,WAAqCqF,EAAQ5D,KAA7C,KAAqD4D,EAAQhE,OAC5DgE,EAAQjD,cAAgB,2DAAsC,KAC9DwC,EAAgBS,EAAQR,WACxBsB,EAAed,EAAQC,kBAXzB,KA0JNa,CAAenI,EAAS4H,UACzB,6BACA,kBAAC1F,EAAA,EAAD,CAAQE,QAASkJ,GAAjB,WAEA,uBAAGtJ,UAAU,UAAb,WAAgChC,EAASoI,U,gCCvLlC2D,G,MAAW,WACvB,IAAMtL,EAAUC,cAChB,OACC,oCACC,yBAAKsB,UAAU,YACd,yBAAKgK,MAAO,CAAEC,UAAW,SACxB,8CACA,uBAAGD,MAAO,CAAEE,UAAW,UAAvB,oCACkC,2CAAwB,6BAD1D,eAGA,kBAAChK,EAAA,EAAD,CAAQ8J,MAAO,CAAEE,UAAW,QAAU9J,QAAS,kBAAM3B,EAAQ0L,WAA7D,gBC2BE,IA1BNC,EACAC,GAyBYC,IA1BZF,EA0BkC,SAACG,EAAcjN,GACjD,OAAIA,EACI,kBAAC,EAAD,MAED,oCAAGiN,EAAMpN,WA3BhB,4MACCK,MAAoB,CAAEF,WAAOkN,GAD9B,gEAOmBlN,EAAcmN,GAC3BJ,IACHA,GAAa/M,EAAOmN,KATvB,+BAcE,OAAOL,EAAUM,KAAKH,MAAOG,KAAKlN,MAAMF,UAd1C,gDAGiCA,GAC/B,MAAO,CAAEA,aAJX,GAA8BqN,IAAMC,YCXxBC,I,OAAQ,WACnB,IAAMpM,EAAUC,cACVoM,EAAYC,qBAAWhO,GAFJ,EAGOK,mBAAS,IAHhB,mBAGlB4N,EAHkB,KAGRC,EAHQ,OAIO7N,mBAAS,IAJhB,mBAIlB8N,EAJkB,KAIRC,EAJQ,OAKM/G,YAAS,CACtCC,MV4EkB,qIU3ElB+G,OAAM,EACN9G,UAAW,CAAC9E,GAAIwL,EAAUE,SAAUA,KARb,mBAKlBG,EALkB,KAKVC,EALU,KAUjB9G,EAA0B6G,EAA1B7G,KAAMC,EAAoB4G,EAApB5G,SAAoB4G,EAAV/N,OACnBmH,GAAYD,GAAQA,EAAKjH,OAC5BuN,EAAUrN,SAAS,CAACJ,OAAQ,UAC5BC,MAAO,KAAKC,KAAKiH,EAAKjH,OAAQkB,EAAQa,KAAK,YAG7C,IAAMiM,EAAgB,CACpB/L,GAAG,WACHI,UAAU,YACVC,SAAU,SAACC,GACPmL,EAAYnL,EAAMC,OAAOxB,SAG3BiN,EAAW,CACbhM,GAAG,WACHI,UAAU,WACVC,SAAU,SAACC,GACPqL,EAAYrL,EAAMC,OAAOxB,SAG3BkN,EAAa,SAAC/D,GAAD,OAAkB7J,MAAM,QAAD,OAAS6J,EAAT,iBACxC3J,MAAK,SAACC,GACN,IAAKA,EAASC,GACb,MAAM,IAAIC,MAAMF,EAASG,YAEpBH,EAASI,OAAOL,MAAK,SAAC2N,GACuB,OADXZ,EAAUrN,SAAS,CAACJ,OAAQ,UACpEC,MAAO,KAAKC,KAAKmO,EAAInO,OAAQkB,EAAQa,KAAKoM,EAAI5O,KAAY4O,SAM1D,OADE/N,QAAQC,IAAI,OAAQkN,EAAUtN,OAE9B,6BACA,yBAAKwC,UAAU,YACf,qCACE,yBAAKA,UAAU,YAEb,kBAACC,EAAA,EAAcsL,GACf,kBAACtL,EAAA,EAAcuL,GACf,kBAACtL,EAAA,EAAD,CAAQV,GAAG,WAAWW,KAAK,UAAUH,UAAU,cAAaI,QAAS,WAX3EkL,IAWgG3N,QAAQC,IAAI,WAAtG,UAEF,yBAAKoC,UAAU,SACf,oCACA,kBAACE,EAAA,EAAD,CACAV,GAAG,YACHW,KAAK,YACCC,QAAS,WAAQqL,EAAW,YAHlC,0BAMF,kBAACvL,EAAA,EAAD,CACAV,GAAG,YACHW,KAAK,YACDC,QAAS,WAAQqL,EAAW,aAHhC,gC,kCC5CSE,GAAiB,SAAC,GAKnB,IAJAf,EAID,EAJVR,UACAwB,EAGU,EAHVA,gBACAC,EAEU,EAFVA,gBACGC,EACO,iEACJvN,EAAQwM,qBAAWhO,GACnB0B,EAAUC,cACZqN,EC5BkB,WACtB,IAAMxN,EAAQwM,qBAAWhO,GACnBiP,EAAmC,YAAvBzN,EAAMf,MAAMH,OACxB4O,EAAiC,UAAvB1N,EAAMf,MAAMH,OACtB6O,EAAmC,YAAvB3N,EAAMf,MAAMH,OACxBuO,EAAkBrN,EAAMf,MAAMD,MAAQ2O,EAC5C,OAAO,2BACH3N,EAAMf,OADV,IAECwO,YACAC,UACAC,YACAN,oBDiBUO,GACFV,EAAa,SAAC/D,GAAD,OAAkB7J,MAAM,QAAD,OAAS6J,EAAT,iBAC5C3J,MAAK,SAACC,GACN,IAAKA,EAASC,GACb,MAAM,IAAIC,MAAMF,EAASG,YAEpBH,EAASI,OAAOL,MAAK,SAAC2N,GACwB,OADZnN,EAAMd,SAAS,CAACJ,OAAQ,UAChEC,MAAO,KAAKC,KAAKmO,EAAInO,OAAQkB,EAAQa,KAAKoM,EAAI5O,KAAa4O,SAExDU,EAAkB,WAErB,OADAC,OAAOC,aAAaC,QAAQ,cAAeF,OAAOG,SAASC,MAE1D,6BACC,yBAAKzM,UAAU,UACd,yCACA,uBAAGgK,MAAO,CAAEE,UAAW,UAAvB,8CACA,6BACC,kBAAChK,EAAA,EAAD,CAEA8J,MAAO,CACNE,UAAW,MACXwC,aAAc,OAEftM,QAAS,kBAAI3B,EAAQa,KAAK,OAN1B,0BAUD,yBAAKU,UAAU,SACV,oCACL,kBAACE,EAAA,EAAD,CACMV,GAAG,UACNW,KAAK,YACPC,QAAS,WAAQqL,EAAW,YAH7B,0BAMA,kBAACvL,EAAA,EAAD,CACCV,GAAG,SACHW,KAAK,YACLC,QAAS,WAAQqL,EAAW,aAH7B,+BAYAI,IACHO,EAAkBP,GAmBnB,OAAO,kBAAC,IAAD,iBAAWC,EAAX,CAAiBa,OAAQ,SAACpC,GAAD,OAC/BqB,EACGA,EAAgB,CAAEG,SACjB,kBAACnB,EAAD,iBAAeL,EAAWuB,IAC1B,kBAACM,EAAD,OArBY7O,EAsBLwO,EAAKxO,QAlBZuO,EAAKc,KAAKtE,SAAS,WAAawD,EAAKc,KAAKtE,SAAS,gBAAkBwD,EAAKc,KAAKtE,SAAS,eACxF/K,EAAKsP,YAAYvE,SAAS,UAK1BwD,EAAKc,KAAKtE,SAAS,aAAewD,EAAKc,KAAKtE,SAAS,QACrD/K,EAAKsP,YAAYvE,SAAS,aAD9B,GAaI,kBAACsC,EAAD,iBAAeL,EAAWuB,IAC1B,kBAACM,EAAD,MAxBW,IAAC7O,O,SEzEZuP,G,uKACK,IAAD,EAMJpC,KAAKH,MAJR9L,EAFO,EAEPA,QACAsO,EAHO,EAGPA,GAEGjB,GALI,EAIPkB,cAJO,iDAOR,OACC,kBAAC,kBAAD,eACC5M,QAAS,kBAAM3B,EAAQa,KAAKyN,IAC5BE,UAAW,SAACnN,GAAkC,UAAdA,EAAMyD,KAAiB9E,EAAQa,KAAKyN,KAChEjB,Q,GAZ6BlB,aAiBxBsC,GAA2BC,YAAWL,IAEtCM,GAAqBC,sBACjC,SAAC9C,EAAO+C,GAAR,OAAgB,kBAACJ,GAA6B3C,MAI/C6C,GAAmBnQ,YAAc,qB,WCpBpBsQ,GAAM,WACjB,IAAM9O,EAAUC,cAChB,OACA,kBAAC,IAAD,KACE,kBAAC4L,GAAD,KACE,kBAAC,EAAD,KACE,yBAAKtK,UAAU,OACb,kBAAC,IAAD,CAAO4M,KAAK,eAAexC,UAAW,WACtC,IAAMoD,EAAcnB,OAAOC,aAAamB,QAAQ,eAGhD,OAFApB,OAAOC,aAAaoB,WAAW,eAC/BrB,OAAOG,SAASC,KAAOe,GAAe,IAC/B,QAEP,kBAAC,IAAD,CAAcjP,MAAO3B,GACnB,kBAAC+Q,GAAA,EAAD,CAAQC,aAAW,kBACjB,kBAACC,GAAA,EAAD,CAAYpB,KAAK,IAAIqB,OAAO,OAA5B,WAGA,kBAACC,GAAA,EAAD,CAAkBH,aAAW,WAC7B,kBAACR,GAAD,CAAoB3O,QAASA,EAASsO,GAAG,WAAzC,UACA,kBAACK,GAAD,CAAoB3O,QAASA,EAASsO,GAAG,SAAzC,UAGF,kBAAC,IAAD,CAAOH,KAAM,IAAKxC,UAAWS,GAAOmD,OAAK,IACzC,kBAAC,GAAD,CAAgBpB,KAAM,UAAWxC,UAAW5L,EAAYwP,OAAK,IAC7D,kBAAC,GAAD,CAAgBpB,KAAK,uBAAuBxC,UAAW/D,EAAY2H,OAAK,IACxE,kBAAC,GAAD,CAAgBpB,KAAK,4BAA4BxC,UAAWnG,EAAa+J,OAAK,IAC9E,kBAAC,GAAD,CAAgBpB,KAAK,oBAAoBxC,UAAWjB,IACpD,kBAAC,GAAD,CAAgByD,KAAK,QAAQxC,UAAWzC,EAAWqG,OAAK,UC5BhDC,QACW,cAA7B5B,OAAOG,SAAS0B,UAEe,UAA7B7B,OAAOG,SAAS0B,UAEhB7B,OAAOG,SAAS0B,SAASC,MACvB,2DCXN,IAAgBvD,MAET2C,GAF4Ba,IAASzB,OAAO,kBAAC/B,GAAD,MAAcyD,SAASC,eAAe,SDoInF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1Q,MAAK,SAAA2Q,GACJA,EAAaC,gBAEdtQ,OAAM,SAAAf,GACLK,QAAQL,MAAMA,EAAMsR,a","file":"static/js/main.4adb7f52.chunk.js","sourcesContent":["import { createClient, CombinedError } from 'urql';\n\nexport const allFormQuery = `\n{\n\tforms {\n        id,\n        docType,\n        procedureID,\n        patientID,\n        lineage,\n        title,\n        lastModified\n\t}\n}\n`;\n\nexport const formQuery = `\nquery($id: String!) {\n\tform(id: $id) {\n\t\t... on SDCForm {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tprocedureID,\n\t\t\tpatientID,\n\t\t\tlineage,\n\t\t\ttitle,\n\t\t\tsectionIDs,\n\t\t\turi,\n\t\t\tfooter,\n\t\t\tlastModified,\n\t\t\tarbitraryProperties,\n\t\t}\n\t\t... on SDCSection {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tname,\n\t\t\ttitle,\n\t\t\ttype,\n\t\t\tmustImplement,\n\t\t\tminCard,\n\t\t\tmaxCard,\n\t\t\tsubSectionIDs,\n\t\t\tsuperSectionID,\n\t\t\tarbitraryProperties,\n\t\t}\n\t\t... on SDCQuestion {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tname,\n\t\t\ttitle,\n\t\t\tmustImplement,\n\t\t\treadOnly,\n\t\t\tminCard,\n\t\t\tmaxCard,\n\t\t\tmaxSelections,\n\t\t\tquestionType,\n\t\t\tisEnabled,\n\t\t\tresponse {\n\t\t\t\tid,\n\t\t\t\tquestionID,\n\t\t\t\tresponseType,\n\t\t\t\tarbitraryProperties,\n\t\t\t\t... on SDCMultipleChoiceResponse {\n\t\t\t\t\tchoices,\n\t\t\t\t\tcanMultiSelect,\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t}\n\t\t\t\t... on SDCIntResponse {\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t\tdefaultNum: defaultValue,\n\t\t\t\t}\n\t\t\t\t... on SDCTextResponse {\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t\tdefaultText: defaultValue,\n\t\t\t\t}\n\t\t\t\t... on SDCDateResponse {\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t\tdefaultDate: defaultValue,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttextAfterResponse,\n\t\t\tsuperSectionID,\n\t\t\tsuperQuestionID,\n\t\t\tsuperAnswerID,\n\t\t\tarbitraryProperties,\n\t\t}\n\t}\n}\n`;\nexport const userQuery = `\nquery($id: String, $password: String) {\n\tuser(id: $id, password: $password) {\n\t\tid,\n\t\tpassword,\n\t\tpermissions\n\t}\n}`\nexport const questionQuery = `\nquery($id: String!) {\n\tquestion(id: $id) {\n\t\tid,\n\t\tdocType,\n\t\tname,\n\t\ttitle,\n\t\tmustImplement,\n\t\treadOnly,\n\t\tminCard,\n\t\tmaxCard,\n\t\tmaxSelections,\n\t\tquestionType,\n\t\tisEnabled,\n\t\tresponse {\n\t\t\tid,\n\t\t\tquestionID,\n\t\t\tresponseType,\n\t\t\tarbitraryProperties,\n\t\t\t... on SDCMultipleChoiceResponse {\n\t\t\t\tchoices,\n\t\t\t\tcanMultiSelect,\n\t\t\t\tuserInput: userInput,\n\t\t\t}\n\t\t\t... on SDCIntResponse {\n\t\t\t\tinputNum: userInput,\n\t\t\t\tdefaultNum: defaultValue,\n\t\t\t\tuserInput: userInput,\n\t\t\t}\n\t\t\t... on SDCTextResponse {\n\t\t\t\tinputText: userInput,\n\t\t\t\tdefaultText: defaultValue,\n\t\t\t\tuserInput: userInput,\n\t\t\t}\n\t\t},\n\t\ttextAfterResponse,\n\t\tsuperSectionID,\n\t\tsuperQuestionID,\n\t\tsuperAnswerID,\n\t\tarbitraryProperties,\n\t}\n}\n`;\n\nexport const sectionQuery = `\nquery($id: String!) {\n\tsection(id: $id) {\n\t\t... on SDCSection {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tname,\n\t\t\ttitle,\n\t\t\ttype,\n\t\t\tmustImplement,\n\t\t\tminCard,\n\t\t\tmaxCard,\n\t\t\tsubSectionIDs,\n\t\t\tsuperSectionID,\n\t\t\tarbitraryProperties,\n\t\t}\n\t\t... on SDCQuestion {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tname,\n\t\t\ttitle,\n\t\t\tmustImplement,\n\t\t\treadOnly,\n\t\t\tminCard,\n\t\t\tmaxCard,\n\t\t\tmaxSelections,\n\t\t\tquestionType,\n\t\t\tisEnabled,\n\t\t\tresponse {\n\t\t\t\tid,\n\t\t\t\tquestionID,\n\t\t\t\tresponseType,\n\t\t\t\tarbitraryProperties,\n\t\t\t\t... on SDCMultipleChoiceResponse {\n\t\t\t\t\tchoices,\n\t\t\t\t\tcanMultiSelect,\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t}\n\t\t\t\t... on SDCIntResponse {\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t\tdefaultNum: defaultValue,\n\t\t\t\t}\n\t\t\t\t... on SDCTextResponse {\n\t\t\t\t\tuserInput: userInput,\n\t\t\t\t\tdefaultText: defaultValue,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttextAfterResponse,\n\t\t\tsuperSectionID,\n\t\t\tsuperQuestionID,\n\t\t\tsuperAnswerID,\n\t\t\tarbitraryProperties,\n\t\t}\n\t}\n}\n`;\n\nexport const deleteFormQuery = `\nmutation($id: String) {\n\tdeleteForm(id: $id) {\n\t\tid\n\t}\n}\n`;\n\nexport const updateFormQuery = `\nmutation($id: String, $input: FormInput) {\n\tupdateForm(id: $id, input: $input) {\n\t\tid,\n\t\tdocType,\n\t\tprocedureID,\n\t\tpatientID,\n\t\tlineage,\n\t\ttitle,\n\t\tsections,\n\t\turi,\n\t\tfooter,\n\t\tlastModified,\n\t\tarbitraryProperties,\n\t}\n}\n`;\nexport const updateResQuery = `\nmutation($id: String, $input: UserResponse) {\n\tupdateRes(id: $id, input: $input) {\n\t\tid\n\t}\n}\n`;\n\nexport const uploadFormQuery = `\nmutation($id: String, $input: FormXMLInput) {\n\tuploadForm(id: $id, input: $input) {\n\t\tid,\n\t\txml\n\t}\n}\n`;\n\nexport const updateQuestionQuery = `\nmutation($id: String, $input: SDCQuestionInput) {\n\tupdateQuestion(id: $id, input: $input) {\n\t\tid,\n\t\tdocType,\n\t\tname,\n\t\ttitle,\n\t\tmustImplement,\n\t\treadOnly,\n\t\tminCard,\n\t\tmaxCard,\n\t\tmaxSelections,\n\t\tquestionType,\n\t\tisEnabled,\n\t\ttextAfterResponse,\n\t\tsuperQuestionID,\n\t\tsubQuestions,\n\t\tarbitraryProperties,\n\t}\n}\n`;\n\nexport const updateSectionQuery = `\nmutation($id: String, $input: SDCSectionInput) {\n\tupdateSection(id: $id, input: $input) {\n\t\tid,\n\t\tdocType,\n\t\tname,\n\t\ttitle,\n\t\ttype,\n\t\tmustImplement,\n\t\tminCard,\n\t\tmaxCard,\n\t\tquestions {\n\t\t\tid,\n\t\t\tdocType,\n\t\t\tname,\n\t\t\ttitle,\n\t\t\tmustImplement,\n\t\t\treadOnly,\n\t\t\tminCard,\n\t\t\tmaxCard,\n\t\t\tmaxSelections,\n\t\t\tquestionType,\n\t\t\tisEnabled,\n\t\t\ttextAfterResponse,\n\t\t\tsuperQuestionID,\n\t\t\tsubQuestions\n\t\t},\n\t\tsubSections,\n\t\tarbitraryProperties,\n\t}\n}\n`;\n\nexport const urqlClient = createClient({\n\turl: `/graphql`\n});\n\nexport const handleUrqlError = (error: CombinedError | undefined) => {\n\tif (error) {\n\t\tfor (const { message } of error.graphQLErrors) {\n\t\t\tthrow new Error(message);\n\t\t}\n\t}\n};\n","import React, {\n\tcreateContext,\n\tuseState,\n\tuseEffect\n} from 'react';\n\nconst UserContext: React.Context<any> = createContext({});\n\nUserContext.displayName = 'UserContext';\n\nconst getUser = () => fetch(`/api/cur-user`, { credentials : 'include' })\n\t.then((response) => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn response.json();\n\t});\n\nconst UserContextProvider = ({ children }: any) => {\n\tconst [state, setState] = useState({\n\t\tstatus: 'pending',\n\t\terror: null,\n\t\tuser: null\n\t});\n\n\tuseEffect(() => {\n\t\tif (state.user) {\n\t\t\tconsole.log(state, 'qaq');\n\t\t\treturn;\n\t\t}\n\t\tgetUser().then(\n\t\t\t(user) => setState({\n\t\t\t\tstatus: 'success',\n\t\t\t\terror: null,\n\t\t\t\tuser\n\t\t\t} as any)\n\t\t).catch(\n\t\t\t(error) => setState({\n\t\t\t\tstatus: 'error',\n\t\t\t\terror,\n\t\t\t\tuser: null\n\t\t\t} as any)\n\t\t);\n\t}, []);\nconsole.log(\"user\", state);\n\treturn (\n\t\t<UserContext.Provider value={{state:state, setState:setState}}>\n\t\t\t{ children }\n\t\t</UserContext.Provider>\n\t);\n};\n\n\nexport {\n\tUserContext,\n\tUserContextProvider\n};\n","import React, {useState, useContext} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from 'urql';\nimport { deleteFormQuery } from '../query';\nimport {TextInput, Button} from 'carbon-components-react';\nimport {UserContext} from '../common/user-context';\nimport './FormManage.scss'\n\nexport const FormManage = () => {\n  const history = useHistory();\n  const [, deleteForm] = useMutation(deleteFormQuery);\n  const [formID, setFormID] = useState('');\n  const handleProcedureIdClick = async (action: any, ...params: any) => {\n    // const formId = prompt('Please enter the Form ID');\n    if (!validateId(formID)){\n      return;\n    }\n    await action(formID, ...params);\n  }\n\n  const displayFormAction = async (formId: string) => {\n    history.push('/formdisplay/' + formId);\n  } \n  \n  const deleteFormAction = async (formId: string) => {\n    const result = await deleteForm({ id: formId });\n    if (!result.error) alert(`Form ${formId} deleted!`);\n    else alert(`Form deletion failed. There is no form for ID ${formId}`);\n  }\n\n  const uploadFormAction = async (action: string) => {\n    history.push('/upload-form/' + action);\n  }\n  const txtInputProps = { // make sure all required component's inputs/Props keys&types match\n  id:\"FormID\",\n  labelText:\"Form ID\",\n  onChange: (event:any)=>{\n    setFormID(event.target.value)\n  }\n}\n  return (\n    <div className=\"App\">\n    <div className=\"mainWrap\">\n      <div className='displayDelete'>\n        <TextInput {...txtInputProps}/>\n        <Button id=\"displayButton\" kind=\"tertiary\" className=\"menu-Button\" onClick={() => handleProcedureIdClick(displayFormAction)}>Display Form</Button>\n        <Button id=\"deleteButton\" kind=\"danger\" className=\"menu-Button\" onClick={() => handleProcedureIdClick(deleteFormAction)}>Delete Form</Button>\n      </div>\n      <div className='uploadUpdate'>\n        <Button id=\"uploadButton\" kind=\"tertiary\" className=\"menu-Button\" onClick={() => uploadFormAction('new')}>Upload Form</Button>\n        <Button id=\"updateButton\" kind=\"tertiary\" className=\"menu-Button\" onClick={() => uploadFormAction('update')}>Update Form</Button>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nfunction validateId(procedureId: string | null) {\n  return procedureId !== null && procedureId !== \"\";\n}","import React from 'react';\nimport {TextInput, NumberInput, DatePicker, DatePickerInput, RadioButton, FormGroup} from 'carbon-components-react'\nimport { responsePathAsArray } from 'graphql';\n\n\nexport const SDCQuestion = ({questionID, formArray, setFormArray} : any) => {\nconst questionIndex=formArray.findIndex(((obj:any) => obj.id == questionID));\nconst question:any= formArray[questionIndex];\nconst inputArray = [...formArray]\n\nif (question.superQuestionID != null) {\n    const superIndex = formArray.findIndex(((obj:any) => obj.id == question.superQuestionID));\n    if(formArray[superIndex].response.userInput == question.superAnswerID) {\n        question.isEnabled = true;\n    }else {\n        question.isEnabled = false;\n    }\n}\n\nconst textProps = {\n    id: question.id,\n    labelText: question.title,\n    onChange : (event:any)=>{\n        const qIndex = formArray.findIndex(((obj:any) => obj.id == question.id));\n        inputArray[qIndex].response.userInput = event.target.value\n        setFormArray(inputArray)\n    },\n    // mustImplement:question.mustImplement ? true : false,\n    disabled: question.isEnabled == null ? false : !question.isEnabled,\n    value: question.response.userInput !== null ? question.response.userInput : \"\",\n    helperText: question.name\n}\n\nconst dateProps = {\n    id: question.id,\n    labelText: question.title,\n    onChange : (event:any)=>{\n        const qIndex = formArray.findIndex(((obj:any) => obj.id == question.id));\n        inputArray[qIndex].response.userInput = event.target.value\n        setFormArray(inputArray)\n    },\n    // mustImplement:question.mustImplement ? true : false,\n    disabled: question.isEnabled == null ? false : !question.isEnabled,\n    value: question.response.userInput !== null ? question.response.userInput : \"\",\n}\n\nconst numProps = {\n    id: question.id,\n    //labeltext: question.title,\n    onChange : (event:any)=>{\n        const qIndex = formArray.findIndex(((obj:any) => obj.id == question.id));\n        if(inputArray[qIndex].response.userInput === null){\n            inputArray[qIndex].response.userInput = 0;\n        }\n        if(event.target.value)\n            inputArray[qIndex].response.userInput = isNaN(parseInt(event.target.value)) ? inputArray[qIndex].response.userInput : parseInt(event.target.value);\n        else if (event.target.title === \"Increment number\"){\n            inputArray[qIndex].response.userInput = parseInt(inputArray[qIndex].response.userInput) + 1;\n        }\n        else if (event.target.title === \"Decrement number\"){\n            inputArray[qIndex].response.userInput = parseInt(inputArray[qIndex].response.userInput) - 1;\n        }\n        setFormArray(inputArray)\n    },\n    // mustImplement:question.mustImplement ? true : false,\n    min: 0,\n    max: 9999999,\n    value: question.response.userInput !== null ? question.response.userInput : 0,\n    step: 1,\n    disabled:question.isEnabled == null ? false : !question.isEnabled,\n    helperText: question.name\n}\n\nconst radioProps = {\n    className:\"radioWrap\",\n    onChange : (event:any)=>{\n        const inputArray:any = [...formArray]\n        const qIndex = inputArray.findIndex(((obj:any) => obj.id == question.id));\n        if(inputArray[qIndex].response.userInput == event.target.value){\n            inputArray[qIndex].response.userInput=''\n        }\n        else{inputArray[qIndex].response.userInput = event.target.value}\n        setFormArray(inputArray)\n    },\n    name :question.name,\n}\nconst radioButton ={\n    className:\"radioButton\",\n    disabled:question.isEnabled == null ? false : !question.isEnabled,    \n    name:question.name\n}\nif (question.questionType == 'text') {\n    return (\n        <div className=\"SDCQuestion\">\n        {question.mustImplement ? \"*\" : null}\n        {renderArbitraryQuestionProperties(question)}\n        <TextInput {...textProps}/>\n        </div>\n      )\n} else if (question.questionType == 'date') {\n    return (\n        <div className=\"SDCQuestion\">\n        {question.mustImplement ? \"*\" : null}\n        {renderArbitraryQuestionProperties(question)}\n        <DatePicker dateFormat=\"m/d/Y\" datePickerType=\"simple\">\n            <DatePickerInput {...dateProps}/>\n        </DatePicker>{question.textAfterResponse ? question.textAfterResponse : \"\"}\n        </div>\n      )\n} else if (question.questionType == 'number') {\n    return (\n        <div className=\"SDCQuestion\">\n        {question.mustImplement ? \"*\" : null}\n        {renderArbitraryQuestionProperties(question)}\n        <NumberInput {...numProps}/>\n        </div>\n      )\n} \nelse if (question.questionType == 'single choice') {\n    return (\n        <div className=\"SDCQuestion\">\n        <FormGroup legendText={question.title? question.title : question.id}> {question.mustImplement ? \"*\" : null}\n        {renderArbitraryQuestionProperties(question)}\n        <div {...radioProps}>\n            {question.response.choices.map((choice: any) => {\n                let text = choice.title;\n                if(question.response.arbitraryProperties && question.response.arbitraryProperties.length !== 0) {\n                    for(let [[key, value]] of question.response.arbitraryProperties.map((item: any) => Object.entries(item))){\n                        if(Array.isArray(value) && value.length === question.response.choices.length) {\n                            text = text + \", \" + JSON.stringify(key) + \": \" + JSON.stringify(value[question.response.choices.indexOf(choice)]);\n                        }\n                    }\n                }\n                return <RadioButton value={choice.ID} labelText={text} key={choice.name} {...radioButton} defaultChecked={question.response.userInput==choice.ID? true:false}/> \n        })}\n        </div>\n        </FormGroup>\n        </div>\n      )\n} \nelse {\n    return null;\n}\n};\n\nconst renderArbitraryQuestionProperties = (question: any) => {\n    return (<div>\n        {question.arbitraryProperties ? question.arbitraryProperties.map((item: any) => {\n          return item ? <div className=\"arbitraryQuestionProperties\">{\n            Object.entries(item).map((entry: any) => <h6 className=\"arbitraryQuestionProperty\">{JSON.stringify(entry[0])}: {JSON.stringify(entry[1])}</h6>)\n          }</div> : \"\"\n        }) : \"\"}\n    </div>);\n}","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from 'urql'\nimport { formQuery } from '../query'\nimport {SDCQuestion} from '../form-filler/SDCQuestion'\nimport {Button, Form} from 'carbon-components-react'\nimport \"../form-filler/FormFill.scss\"\nexport const FormDisplay = () => {\n  const { procedureId } = useParams<{ procedureId: string }>();\n  const [formArray, setFormArray] = useState<any>([]);\n  const [formVars] = useState<any>({ id: procedureId })\n  const [formObj,] = useQuery({\n    query: formQuery,\n    variables: formVars\n  })\n  \n  const { data, fetching, error } = formObj;\n  if (fetching) return (<p>Loading...</p>);\n\n  if (formArray.length == 0) {\n    data.form.map((item:any) => {\n      delete item.__typename;\n      formArray.push(item);\n    })\n  }\n  const renderSections = (sections: any) => {\n    if (!sections){\n      return null;\n    }\n    return (\n      <div className='sectionWrap'>\n        {sections.map((section: any) => {\n          if (section === null) return null;\n          return (\n            <div>\n              <p className=\"sectionTitle\">Section {section.name}: {section.title}</p>\n              {section.mustImplement ? <p>* Must Complete this section</p> : null}\n              {renderQuestions(section.questions)}\n              {renderSections(section.subSections)}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n\n  const renderQuestions = (questions: any) => {\n    return (\n      <div>\n        {questions.map((question: any) => {\n          return <div> \n            <SDCQuestion  questionID={question.id} formArray={formArray} setFormArray={setFormArray}/>\n            {question.subQuestions? renderQuestions(question.subQuestions):null}\n          </div>\n        })}\n      </div>\n    )\n  }\n  const renderProperties = (data: any, arbitraryProperties: any) => {\n    return (\n      <div className=\"fillerProperties\">\n        <h5>Title: {data.title}</h5>\n        <h6>Version: {data.lastModified}</h6>\n        {/*<h5>Release Date: {(new Date(data.releaseDate)).toLocaleString()}</h5>*/}\n        <h6>Lineage: {data.lineage}</h6>\n        {data.patientID !== \"template\" ? <h5>Patient: {data.patientID}</h5> : null}\n        {arbitraryProperties ? arbitraryProperties.map((item: any) => {\n          return item ? <div className=\"arbitraryFormProperties\">{\n            Object.entries(item).map((entry: any) => <h6 className=\"arbitraryFormProperty\">{JSON.stringify(entry[0])}: {JSON.stringify(entry[1])}</h6>)\n          }</div> : \"\"\n        }) : \"\"}\n      </div>\n    )\n  }\n  const assemble = (data: any): any => {\n    if(!data) return {};\n    let { sectionIDs, ...form} = data[0];\n    form.sections = [];\n    sectionIDs.forEach((sectionId: string) => form.sections.push(assembleSection(sectionId, data)));\n    return form;\n  }\n  \n  const assembleSection = (sectionId: string, data: any): any => {\n    const sectionObj = data.find((item: any) => item.docType === \"SDCSection\" && item.id === sectionId);\n    let {subSectionIDs, ...section} = sectionObj;\n    section.subSections = [];\n    subSectionIDs.forEach((id: string) => section.subSections.push(assembleSection(id, data)));\n    let questions = data.filter((item: any) => item.docType === \"SDCQuestion\" && item.superSectionID === sectionId);\n    section.questions = [];\n    questions.forEach((question: any) => section.questions.push(assembleQuestions(question, data)));\n    return section;\n  }\n  \n  const assembleQuestions = (question: any, data: any): any => {\n    const subQuestions = data.filter((item: any) => item.docType === \"SDCQuestion\" && item.superQuestionID === question.id);\n    question.subQuestions = subQuestions;\n    return question;\n  }\n  const response = assemble(formArray);\n  return (\n    <div className=\"fillerWrap\">\n    <div className=\"fillerHead\">\n      <h3>{response.formID}</h3>\n      <h3>{response.name}</h3>\n      {renderProperties(response, response.arbitraryProperties)}\n    </div>\n      <Form  className=\"fillerForm\">\n      <br></br>\n      {renderSections(response.sections)}\n      <br></br>\n      </Form>\n      <p className=\"footer\">Footer: {(response.footer)}</p>\n    </div>\n  )\n};\n\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useMutation } from 'urql';\nimport { uploadFormQuery } from '../query';\nimport {TextInput, Button} from 'carbon-components-react'\n\nexport const FormUpload = () => {\n  const { action } = useParams<{ action: string }>();\n  const [,uploadForm] = useMutation(uploadFormQuery);\n  const initialFormState = {\n    id: '',\n    title: '',\n    name: '',\n    procedureID: ''\n  };\n  const initialFileData = {\n    fileName: '',\n    contents: ''\n  }\n  const [formToUpdate, setFormToUpdate] = useState<any>(initialFormState);\n  const [fileData, setFileData] = useState<any>(initialFileData);\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    /*\n\n    // check a form has been entered\n\n    if (formToUpdate.procedureID === initialFormState.procedureID) {\n      alert('Please enter a procedure ID');\n      return;\n    }\n\n    if (fileData.fileName === initialFileData.fileName) {\n      alert('Please upload a form');\n      return;\n    }*/\n  \n    let clone = { ...formToUpdate };\n    clone = {id: formToUpdate.id, input: {id: formToUpdate.id, xml: fileData.contents}};\n    setFormToUpdate(clone);\n    uploadForm(clone);\n    alert(`Form was ${action === \"new\" ? \"uploaded\" : \"updated\"} with title: ${fileData.fileName} and procedure ID: ${formToUpdate.procedureID}`);\n    return false;\n   /* \n    // reset state of FormUpload\n    \n    setFormToUpdate(initialFormState);\n    setFileData(initialFileData);\n    */\n  }\n  const updateFile = async (event: any) => {\n\n     let fileIn = event.currentTarget.files[0];\n     let textPromise = fileIn.text();\n\n     textPromise.then((text: any) => text);\n\n     let content = await fileIn.text();\n    setFileData({fileName: fileIn.name, contents:  content});\n  }\n  const updateprocedureID = (event: any) => {\n    let newProcedureID = event.currentTarget.value;\n    setFormToUpdate({id: newProcedureID, procedureID: newProcedureID});\n  }\n  const txtInput = { // make sure all required component's inputs/Props keys&types match\n  id:\"FormID\",\n  labelText:\"Form ID\",\n  onChange: updateprocedureID\n}\n  return (\n    <div className=\"update-form-container\">\n      <h1>{action === \"new\" ? \"Upload\" : \"Update\"} a Form</h1>\n      <form id=\"FormUpdate\" onSubmit={handleSubmit}>\n          <TextInput {...txtInput}/>\n        <label>\n          File:\n          <input type=\"file\" onChange={updateFile}/>\n        </label>\n        <Button type=\"submit\" kind=\"tertiary\">Submit</Button>\n      </form>\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport { useHistory} from 'react-router-dom';\nimport {  useQuery } from 'urql';\nimport { allFormQuery} from '../query';\nimport {Search,DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, OverflowMenu, OverflowMenuItem} from 'carbon-components-react'\nimport './DashBoard.scss'\n\nexport const DashBoard = () => {\n    const history = useHistory();\n    const [searchInput, setSearchInput] = useState('');\n    const [resultAll] = useQuery({\n      query: allFormQuery\n    });\n    const search = { // make sure all required component's inputs/Props keys&types match\n    id:\"searchForm\",\n    labelText:\"Procedure ID\",\n    onChange: (event:any) => setSearchInput(event.target.value)\n  }\n  const overflow = { \n  itemText:\"Fill\",\n  onClick: (row:any) => history.push('/fillform/' + row.id)\n}\n\n\n\n  let rows = resultAll.data? resultAll.data.forms.map((item:any)=>  ({id: item.id, procedureID:item.procedureID, lastm: item.lastModified})): [];\n  const headers = [{key:\"id\", header:\"ID\"}, {key:\"procedureID\", header:\"Procedure ID\"}, {key:\"lastm\", header:\"Last Modifed\"}]\n  return (\n    <div className=\"dashBoard\">\n    <div className=\"searchWrap\"><Search {...search} /></div>\n    <div className=\"tableWrap\">\n    <DataTable rows={searchInput == '' ? rows : rows.filter((row:any)=> row.procedureID.includes(searchInput) || row.id.includes(searchInput))} headers={headers}>\n    {({ rows, headers}: any) => (\n      <TableContainer title=\"SDCForms\" description=\"Procedure\">\n        <Table >\n          <TableHead>\n            <TableRow>\n              {headers.map((header: any) => (\n                <TableHeader key={header.key}>\n                  {header.header}\n                </TableHeader>\n              ))}\n              <TableHeader />\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row:any) => (\n              <TableRow key={row.id}>\n                {row.cells.map((cell:any) => (\n                  <TableCell key={cell.id} onClick={()=>history.push('/formfill/' + row.id)}>{cell.value}</TableCell>\n))}\n                {/* <TableCell className=\"bx--table-column-menu\">\n                  <OverflowMenu light flipped>\n                    <OverflowMenuItem {...overflow} onClick={ (row:any) => history.push('/fill/' + row.id)}/>\n                  </OverflowMenu>\n                </TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )}\n  </DataTable>\n  </div>\n    </div>\n  )\n};\n","import React, { useContext, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from 'urql'\nimport { formQuery, updateResQuery } from '../query'\nimport {SDCQuestion} from './SDCQuestion'\nimport {Button, Form, TextInput} from 'carbon-components-react'\nimport \"./FormFill.scss\"\nexport const FormFill = () => {\n  const { formID } = useParams<{ formID: string }>();\n  const [patientID, setPatientID] = useState<any>(0)\n  const [,uploadRes] = useMutation(updateResQuery);\n\n  const [formArray, setFormArray] = useState<any>([]);\n  const [formVars] = useState<any>({ id: formID })\n  const [formObj,] = useQuery({\n    query: formQuery,\n    variables: formVars\n  })\n  const { data, fetching, error } = formObj;\n  if (fetching) return (<p>Loading...</p>);\n\n  if (formArray.length == 0) {\n    data.form.map((item:any) => {\n      delete item.__typename;\n      formArray.push(item);\n    })\n  }\n  const renderSections = (sections: any) => {\n    if (!sections){\n      return null;\n    }\n    return (\n      <div className='sectionWrap'>\n        {sections.map((section: any) => {\n          if (section === null) return null;\n          return (\n            <div>\n              <p className=\"sectionTitle\">Section {section.name}: {section.title}</p>\n              {section.mustImplement ? <p>* Must Complete this section</p> : null}\n              {renderQuestions(section.questions)}\n              {renderSections(section.subSections)}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n\n  const renderQuestions = (questions: any) => {\n    return (\n      <div>\n        {questions.map((question: any) => {\n          return <div> \n            <SDCQuestion  questionID={question.id} formArray={formArray} setFormArray={setFormArray}/>\n            {question.subQuestions? renderQuestions(question.subQuestions):null}\n          </div>\n        })}\n      </div>\n    )\n  }\n  const renderProperties = (data: any, arbitraryProperties: any) => {\n    return (\n      <div className=\"fillerProperties\">\n        <h5>Title: {data.title}</h5>\n        <h6>Version: {data.lastModified}</h6>\n        {/*<h5>Release Date: {(new Date(data.releaseDate)).toLocaleString()}</h5>*/}\n        <h6>Lineage: {data.lineage}</h6>\n        {data.patientID !== \"template\" ? <h5>Patient: {data.patientID}</h5> : null}\n        {arbitraryProperties ? arbitraryProperties.map((item: any) => {\n          return item ? <div className=\"arbitraryFormProperties\">{\n            Object.entries(item).map((entry: any) => <h6 className=\"arbitraryFormProperty\">{JSON.stringify(entry[0])}: {JSON.stringify(entry[1])}</h6>)\n          }</div> : \"\"\n        }) : \"\"}\n      </div>\n    )\n  }\n  \n  const assemble = (data: any): any => {\n    if(!data) return {};\n    let { sectionIDs, ...form} = data[0];\n    form.sections = [];\n    sectionIDs.forEach((sectionId: string) => form.sections.push(assembleSection(sectionId, data)));\n    return form;\n  }\n  \n  const assembleSection = (sectionId: string, data: any): any => {\n    const sectionObj = data.find((item: any) => item.docType === \"SDCSection\" && item.id === sectionId);\n    let {subSectionIDs, ...section} = sectionObj;\n    section.subSections = [];\n    subSectionIDs.forEach((id: string) => section.subSections.push(assembleSection(id, data)));\n    let questions = data.filter((item: any) => item.docType === \"SDCQuestion\" && item.superSectionID === sectionId);\n    section.questions = [];\n    questions.forEach((question: any) => section.questions.push(assembleQuestions(question, data)));\n    return section;\n  }\n  \n  const assembleQuestions = (question: any, data: any): any => {\n    const subQuestions = data.filter((item: any) => item.docType === \"SDCQuestion\" && item.superQuestionID === question.id);\n    question.subQuestions = subQuestions;\n    return question;\n  }\n  const response = assemble(formArray);\n  const textProps = {\n    id: 'patientID',\n    labelText: 'Patient ID',\n    onChange : (event:any)=>{\n      setPatientID(event.target.value)\n      formArray.find((item: any) => item.docType === \"SDCForm\").patientID = event.target.value;\n    },\n    helperText: 'Enter Patient ID',\n    value: formArray.find((item: any) => item.docType === \"SDCForm\").patientID === \"template\" ? \"\" : formArray.find((item: any) => item.docType === \"SDCForm\").patientID,\n}\nconst formSubmit = () => {\n  let submitFlag = 0;\n\n  if(patientID == '')\n  {\n    alert(`Please enter the Patient ID`);\n    submitFlag = 1;\n  }\n  else submitFlag = 0;\n\n  outer_loop:\n  for(let item of formArray)\n  {\n    if(item.docType === \"SDCQuestion\")\n    {\n      if(item.mustImplement !== false && item.isEnabled !== false)\n      {\n        if(item.questionType === \"text\")\n        {\n          if(item.response.userInput === \"\")\n          {\n            alert(`Please fill in the answer for Question: ${(item.title).slice(0, -1)}`);\n            submitFlag = 1;\n            break outer_loop;\n          }\n          else submitFlag = 0;\n        }\n        else if(item.questionType === \"single choice\")\n        {\n          if(item.response.userInput.length == 0)\n          {\n            alert(`Please fill in the answer for Question: ${(item.title).slice(0, -1)}`);\n            submitFlag = 1;\n            break outer_loop;\n          }\n          else submitFlag = 0;\n        }\n        else\n        {\n          if(item.response === null) //item.response.userInput === null after bug input fix\n          {\n            alert(`Please fill in the answer for Question: ${(item.title).slice(0, -1)}`);\n            submitFlag = 1;\n            break outer_loop;\n          }\n          else submitFlag = 0;\n        }\n      }\n    }\n  }\n  \n  if(submitFlag === 0)\n  {\n    const time = Date.now()\n    const responseID = `${response.id}-${patientID}-${time.toString()}`\n    response.id = responseID;\n    uploadRes({id: responseID, input: formArray});\n    console.log(\"This is the response: \", formArray);\n  }\n}\n  return (\n    <div className=\"fillerWrap\">\n    <div className=\"fillerHead\">\n      <h3>{response.formID}</h3>\n      <h3>{response.name}</h3>\n      {renderProperties(response, response.arbitraryProperties)}\n      <TextInput {...textProps}/>\n    </div>\n      <Form onSubmit={formSubmit} className=\"fillerForm\">\n      <br></br>\n      {renderSections(response.sections)}\n      <br></br>\n      <Button onClick={formSubmit}>Submit</Button>\n      </Form>\n      <p className=\"footer\">Footer: {(response.footer)}</p>\n    </div>\n  )\n};\n\n","import React from 'react';\nimport { Button } from 'carbon-components-react';\nimport { useHistory } from 'react-router-dom';\nimport './not-found.scss'\nexport const NotFound = () => {\n\tconst history = useHistory();\n\treturn (\n\t\t<>\n\t\t\t<div className='notFound'>\n\t\t\t\t<div style={{ textAlign: 'left' }}>\n\t\t\t\t\t<h3>404: Not found</h3>\n\t\t\t\t\t<p style={{ marginTop: '0.5em' }}>\n\t\t\t\t\t\tThis page does not exist, click  <strong>Go back</strong><br /> to return.\n\t\t\t\t\t</p>\n\t\t\t\t\t<Button style={{ marginTop: '1rem' }} onClick={() => history.goBack()}>Go back</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","import React, { ErrorInfo } from 'react';\nimport { NotFound } from './not-found';\n\n/* Currently, there lacks react hooks with equivalent\neffect of getDerivedStateFromError and componentDidCatch,\ncurrent component based on: https://gist.github.com/andywer/800f3f25ce3698e8f8b5f1e79fed5c9c,\nthis should be written once the above hooks mentioned above are released.\n*/\n\ntype ErrorHandler = (error: Error, info: ErrorInfo) => void\ntype ErrorHandlingComponent<Props> = (props: Props, error?: Error) => React.ReactNode\n\ntype ErrorState = { error?: Error }\n\nfunction Catch<Props extends {}>(\n\tcomponent: ErrorHandlingComponent<Props>,\n\terrorHandler?: ErrorHandler\n): React.ComponentType<Props> {\n\treturn class Boundary extends React.Component<Props, ErrorState> {\n\t\tstate: ErrorState = { error: undefined }\n\n\t\tstatic getDerivedStateFromError(error: Error) {\n\t\t\treturn { error };\n\t\t}\n\n\t\tcomponentDidCatch(error: Error, info: React.ErrorInfo) {\n\t\t\tif (errorHandler) {\n\t\t\t\terrorHandler(error, info);\n\t\t\t}\n\t\t}\n\n\t\trender() {\n\t\t\treturn component(this.props, this.state.error);\n\t\t}\n\t};\n}\n\ntype Props = {\n\tchildren: React.ReactNode\n}\n\nexport const ErrorBoundary = Catch((props: Props, error?: Error) => {\n\tif (error) {\n\t\treturn <NotFound />;\n\t}\n\treturn <>{props.children}</>;\n});\n","import React, {useState, useContext} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {TextInput, Button} from 'carbon-components-react';\nimport {UserContext} from './common/user-context';\nimport {  useQuery } from 'urql';\nimport { userQuery} from './query';\nimport './login.scss'\nexport const Login = () => {\n  const history = useHistory();\n  const userState = useContext(UserContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [userObj,executeQuery] = useQuery({\n    query: userQuery,\n    pause:true,\n    variables: {id: username, password: password}\n  })\n  const { data, fetching, error } = userObj;\n  if (!fetching && data && data.user){\n    userState.setState({status: 'success',\n    error: null,user:data.user}); history.push('/manage')\n  }\n\n  const userNameProps = { // make sure all required component's inputs/Props keys&types match\n    id:\"username\",\n    labelText:\"User Name\",\n    onChange: (event:any)=>{\n        setUsername(event.target.value)\n    }\n}\nconst pwdProps = { // make sure all required component's inputs/Props keys&types match\n    id:\"password\",\n    labelText:\"Password\",\n    onChange: (event:any)=>{\n        setPassword(event.target.value)\n    }\n}    \nconst guestLogin = (type: string) => fetch(`/api/${type}-guest-login`)\n\t.then((response) => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(response.statusText);\n        }\n        response.json().then((res:any)=>{ userState.setState({status: 'success',\n\t\terror: null,user:res.user}); history.push(res.url);return res;})\n    });\nconst userLogin = () => {\n  executeQuery()\n  };\n    console.log(\"user\", userState.state);\n  return (\n    <div>\n    <div className=\"mainWrap\">\n    <h1>Login</h1>\n      <div className='loginreg'>\n\n        <TextInput {...userNameProps}/>\n        <TextInput {...pwdProps}/>\n        <Button id=\"loginbtn\" kind=\"primary\" className=\"menu-Button\"onClick={() => { userLogin(); console.log('click');}} >Login</Button>\n      </div>\n      <div className=\"guest\">\n      <p>Or...</p>\n      <Button\n      id=\"fillerbtn\"\n      kind=\"secondary\"\n            onClick={() => { guestLogin('filler') }}>\n            Log in as Filler guest\n    </Button>\n    <Button\n    id=\"managebtn\"\n    kind=\"secondary\"\n        onClick={() => { guestLogin('manager') }}>\n        Log in as Manager guest\n    </Button>    \n      </div>\n      </div>\n    </div>\n  );\n};\n\nfunction validateId(procedureId: string | null) {\n  return procedureId !== null && procedureId !== \"\";\n}","import React, { useState,useContext } from 'react';\nimport { Route, useHistory} from 'react-router-dom';\nimport { Button, Modal } from 'carbon-components-react';\nimport { useAuth } from './hooks';\nimport { UserContext } from './user-context';\nimport './not-found.scss'\n\nexport const validUrl = (url: string | null) => {\n\tconst pattern = new RegExp('^(https?:\\\\/\\\\/)?' // protocol\n\t\t+ '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' // domain name\n\t\t+ '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' // ip (v4) address\n\t\t+ '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' // port\n\t\t+ '(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?' // query string\n\t\t+ '(\\\\#[-a-z\\\\d_]*)?$','i');\n\n\tif (!url || !pattern.test(url)) {\n\t\treturn '';\n\t}\n\n\treturn url;\n};\n\n\nexport const ProtectedRoute = ({\n\tcomponent: Component,\n\tisAuthenticated,\n\tnoAuthComponent,\n\t...rest\n}: any) => {\n\tconst value = useContext(UserContext);\n\tconst history = useHistory();\n\tlet auth = useAuth();\n    const guestLogin = (type: string) => fetch(`/api/${type}-guest-login`)\n\t.then((response) => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(response.statusText);\n        }\n        response.json().then((res:any)=>{ value.setState({status: 'success',\n\t\terror: null,user:res.user}); history.push(res.url); return res;})\n\t});\n\tlet NoAuthComponent = () => {\n\t\twindow.localStorage.setItem('redirectUrl', window.location.href);\n\t\treturn (\n\t\t\t<div >\n\t\t\t\t<div className='noAuth'>\n\t\t\t\t\t<h1>SDC Forms</h1>\n\t\t\t\t\t<p style={{ marginTop: '0.5em' }}>You don't have access to this page, try...</p>\n\t\t\t\t\t<div>\t\t\t\t\t\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t// disabled\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginTop: '2em',\n\t\t\t\t\t\t\tmarginBottom: '1em'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={()=>history.push('/')}\n\t\t\t\t\t\t>\n\t\t\t\t\t\tLog in to get started\n\t\t\t\t\t</Button></div>\n\t\t\t\t\t<div className=\"guest\">\n      \t\t\t\t<p>Or...</p>\n\t\t\t\t\t<Button\n\t\t\t\t\t      id=\"fillbtn\"\n\t\t\t\t\t\t  kind=\"secondary\"\n\t\t\t\t\t\tonClick={() => { guestLogin('filler') }}>\n\t\t\t\t\t\tLog in as Filler guest\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tid=\"mngbtn\"\n\t\t\t\t\t\tkind=\"secondary\"\n\t\t\t\t\t\tonClick={() => { guestLogin('manager') }}>\n\t\t\t\t\t\tLog in as Manager guest\n\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n\n\tif (noAuthComponent) {\n\t\tNoAuthComponent = noAuthComponent;\n\t}\n\tconst tryAuth = (user: any) =>{\n\t\tif(! user) {\n\t\t\treturn false;\n\t\t}\n\t\tif (rest.path.includes('manage') || rest.path.includes('upload-form') || rest.path.includes('formdisplay')){\n\t\t\tif(user.permissions.includes('manage')){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tif (rest.path.includes('formfill') || rest.path.includes('fill') ){\n\t\t\tif(user.permissions.includes('fill')){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn <Route {...rest} render={(props) => (\n\t\tisAuthenticated\n\t\t\t? isAuthenticated({ auth })\n\t\t\t\t? <Component {...props} {...rest} />\n\t\t\t\t: <NoAuthComponent />\n\t\t\t: tryAuth(auth.user)\n\t\t\t\t? <Component {...props} {...rest} />\n\t\t\t\t: <NoAuthComponent />\n\t)} />;\n};\n","import { useContext } from 'react';\nimport { UserContext } from './user-context';\n\nexport const useAuth = () => {\n\tconst value = useContext(UserContext);\n\tconst isPending = value.state.status === 'pending';\n\tconst isError = value.state.status === 'error';\n\tconst isSuccess = value.state.status === 'success';\n\tconst isAuthenticated = value.state.user && isSuccess;\n\treturn {\n\t\t...value.state,\n\t\tisPending,\n\t\tisError,\n\t\tisSuccess,\n\t\tisAuthenticated\n\t};\n\n};\n\n// export const UpdateAuth = (user:any) => {\n// \tconst state = useContext(UserContext);\n// \tstate.status='success', \n// \tstate.user=user;\n// \tconsole.log(state);\n// \treturn {\n// \t\t...state\n// \t};\n// };","import React, {\n\tComponent, ComponentPropsWithRef, forwardRef\n} from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { HeaderMenuItem } from 'carbon-components-react/lib/components/UIShell';\n\ninterface HeaderMenuItemLinkInterface extends RouteComponentProps, ComponentPropsWithRef<any> { }\n\nclass HeaderMenuItemLinkBase extends Component<HeaderMenuItemLinkInterface> {\n\trender() {\n\t\tconst {\n\t\t\thistory,\n\t\t\tto,\n\t\t\tstaticContext,\n\t\t\t...rest\n\t\t} = this.props as any;\n\t\treturn (\n\t\t\t<HeaderMenuItem\n\t\t\t\tonClick={() => history.push(to)}\n\t\t\t\tonKeyDown={(event: any) => {if (event.key === 'Enter') history.push(to);}}\n\t\t\t\t{...rest} />\n\t\t);\n\t}\n}\n\nexport const HeaderMenuItemLinkRouter = withRouter(HeaderMenuItemLinkBase);\n\nexport const HeaderMenuItemLink = forwardRef<HTMLElement, HeaderMenuItemLinkInterface>(\n\t(props, ref) => <HeaderMenuItemLinkRouter {...props} />\n);\n\n// explicitly set display name\nHeaderMenuItemLink.displayName = 'HeaderMenuItemLink';\n","import React from 'react';\nimport { Route, BrowserRouter as Router, useHistory } from 'react-router-dom';\nimport { Provider as UrqlProvider } from 'urql';\nimport { urqlClient } from './query';\nimport { UserContextProvider } from './common/user-context';\nimport {FormManage, FormDisplay, FormUpload, FormFill, DashBoard, ErrorBoundary, Login} from './routes';\nimport {Header, HeaderName, HeaderMenuItem, HeaderNavigation} from 'carbon-components-react'\nimport { ProtectedRoute } from './common/protected-route';\nimport {HeaderMenuItemLink} from './common/header-menu-item-link'\n\nimport './App.css';\n\nexport const App = () => {\n  const history = useHistory();\n  return (\n  <Router>\n    <ErrorBoundary>\n      <UserContextProvider>\n        <div className='App'>\n          <Route path='/after-login' component={() => {\n          const redirectUrl = window.localStorage.getItem('redirectUrl');\n          window.localStorage.removeItem('redirectUrl');\n          window.location.href = redirectUrl || '/';\n          return null;\n        }} />\n          <UrqlProvider value={urqlClient}>\n            <Header aria-label=\"Crunchy coders\">\n              <HeaderName href=\"#\" prefix=\"SDC\">\n                [Forms]\n              </HeaderName>\n              <HeaderNavigation aria-label=\"Crunchy\">\n              <HeaderMenuItemLink history={history} to='/manage'>Manage</HeaderMenuItemLink>\n              <HeaderMenuItemLink history={history} to='/fill'>Fill</HeaderMenuItemLink>\n              </HeaderNavigation>\n            </Header>\n            <Route path={'/'} component={Login} exact/>\n            <ProtectedRoute path={'/manage'} component={FormManage} exact/>\n            <ProtectedRoute path='/upload-form/:action' component={FormUpload} exact/>\n            <ProtectedRoute path='/formdisplay/:procedureId' component={FormDisplay} exact/>\n            <ProtectedRoute path='/formfill/:formID' component={FormFill}/>\n            <ProtectedRoute path='/fill' component={DashBoard} exact/>\n          </UrqlProvider>\n        </div>\n      </UserContextProvider>\n    </ErrorBoundary>\n  </Router>);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line\nconst render = (Component: any) => ReactDOM.render(<Component/>, document.getElementById('root'));\n\nrender(App);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n\tmodule.hot.accept('./App', () => {\n\t\tconsole.info('App updated');\n\t\tconst Next = require('./App').App;\n\t\trender(Next);\n\t});\n}\n"],"sourceRoot":""}